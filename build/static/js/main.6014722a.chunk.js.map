{"version":3,"sources":["components/viewer/index.js","components/uploader/index.js","App.js","serviceWorker.js","index.js"],"names":["ViewerDiv","styled","div","_templateObject","ViewerContainer","_templateObject2","FattHeader","_templateObject3","FattTitle","h2","_templateObject4","Col","_templateObject5","props","right","ColUl","ul","_templateObject6","Viewer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoading","file","setState","fatturaHeader","FatturaElettronicaHeader","cedente","CedentePrestatore","cedenteIVA","DatiAnagrafici","IdFiscaleIVA","IdPaese","IdCodice","react_default","a","createElement","Anagrafica","Denominazione","Sede","Indirizzo","CAP","Comune","Provincia","Nazione","Contatti","Telefono","DatiTrasmissione","CodiceDestinatario","Component","UploaderContainer","uploader_templateObject","Uploader","es","onDrop","_ref","getRootProps","getInputProps","isDragActive","App","acceptedFiles","forEach","reader","FileReader","onload","JSON","parse","result","onabort","console","log","onerror","readAsBinaryString","_this2","className","uploader","e","viewer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6014722a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n//import json from './../../example.json';\nimport styled from 'styled-components';\n\nconst ViewerDiv = styled.div``;\nconst ViewerContainer = styled.div`\n  max-width: 1200px;\n  width: 100%;\n  margin: 0 auto;\n  padding: 0;\n`;\nconst FattHeader = styled.div`\n  display: flex;\n`;\nconst FattTitle = styled.h2`\n  margin: 0 0 5px;\n`;\nconst Col = styled.div`\n  flex: 1;\n  text-align: ${props => (props.right ? 'right' : 'left')};\n`;\nconst ColUl = styled.ul`\n  margin: 0;\n  padding: 0;\n  list-style-type: none;\n`;\n\nclass Viewer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n      file: this.props.file\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      isLoading: true,\n      file: this.props.file\n    });\n    //console.log(json);\n  }\n\n  render() {\n    const json = this.props.file;\n    //console.log(json);\n    const fatturaHeader = json['P:FatturaElettronica'].FatturaElettronicaHeader;\n    const cedente = fatturaHeader.CedentePrestatore;\n    const cedenteIVA =\n      cedente.DatiAnagrafici.IdFiscaleIVA.IdPaese +\n      cedente.DatiAnagrafici.IdFiscaleIVA.IdCodice;\n    return (\n      <ViewerDiv>\n        <ViewerContainer>\n          <FattHeader>\n            <Col>\n              <FattTitle>DATI CEDENTE/PRESTATORE</FattTitle>\n              <ColUl>\n                <li>{cedente.DatiAnagrafici.Anagrafica.Denominazione}</li>\n                <li>P. IVA: {cedenteIVA}</li>\n                <li>{cedente.Sede.Indirizzo}</li>\n                <li>\n                  {cedente.Sede.CAP} - {cedente.Sede.Comune} (\n                  {cedente.Sede.Provincia}) - {cedente.Sede.Nazione}\n                </li>\n                <li>Tel: {cedente.Contatti.Telefono}</li>\n              </ColUl>\n            </Col>\n            <Col>\n              <FattTitle>DATI DOCUMENTO</FattTitle>\n            </Col>\n            <Col right>\n              <FattTitle>DATI CLIENTE</FattTitle>\n              <ColUl>\n                <li>{fatturaHeader.DatiTrasmissione.CodiceDestinatario}</li>\n              </ColUl>\n            </Col>\n          </FattHeader>\n        </ViewerContainer>\n      </ViewerDiv>\n    );\n  }\n}\n\nexport default Viewer;\n","import React, { Component } from 'react';\nimport Dropzone from 'react-dropzone';\nimport styled from 'styled-components';\n//import axios from 'axios';\n\nconst UploaderContainer = styled.div`\n  width: 40vw;\n  min-height: 300px;\n  background: #e8e8e8;\n  border-radius: 6px;\n  border: 2px dashed #a7a7a7;\n  margin: 10px auto;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nclass Uploader extends Component {\n  //   onDrop = acceptedFiles => {\n  //     acceptedFiles.forEach(file => {\n  //       const reader = new FileReader();\n  //       reader.onload = () => {\n  //         const fileAsBinaryString = reader.result;\n  //         console.log(fileAsBinaryString);\n  //         // const data = new FormData();\n  //         // console.log(file, reader);\n  //         // data.append('File[]', file);\n\n  //         // axios\n  //         //   .post('http://localhost:8000/upload', data)\n  //         //   .then(function(response) {\n  //         //     // this.setState({\n  //         //     //   imageURL: `http://localhost:8000/${body.file}`,\n  //         //     //   uploadStatus: true\n  //         //     // });\n  //         //     console.log(response);\n  //         //   })\n  //         //   .catch(function(error) {\n  //         //     console.log(error);\n  //         //   });\n  //       };\n  //       reader.onabort = () => console.log('file reading was aborted');\n  //       reader.onerror = () => console.log('file reading has failed');\n\n  //       reader.readAsBinaryString(file);\n  //     });\n  //   };\n\n  render() {\n    return (\n      <Dropzone onDrop={this.props.onDrop}>\n        {({ getRootProps, getInputProps, isDragActive }) => {\n          return (\n            <UploaderContainer {...getRootProps()}>\n              <input {...getInputProps()} />\n              {isDragActive ? (\n                <p>Rilascia il file XML qui...</p>\n              ) : (\n                <p>\n                  Rilascia il file XML qui o clicca per caricare il file dal tuo\n                  computer\n                </p>\n              )}\n            </UploaderContainer>\n          );\n        }}\n      </Dropzone>\n    );\n  }\n}\n\nexport default Uploader;\n","import React, { Component } from 'react';\nimport Viewer from './components/viewer';\nimport Uploader from './components/uploader';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      file: ''\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      file: ''\n    });\n  }\n\n  onDrop = acceptedFiles => {\n    acceptedFiles.forEach(file => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const file = JSON.parse(reader.result);\n        //console.log(file);\n        this.setState({\n          file: file\n        });\n      };\n      reader.onabort = () => console.log('file reading was aborted');\n      reader.onerror = () => console.log('file reading has failed');\n\n      reader.readAsBinaryString(file);\n    });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Visualizza la Fattura Elettronica</h1>\n        </header>{' '}\n        {!this.state.file && <Uploader onDrop={e => this.onDrop(e)} />}\n        {this.state.file && <Viewer file={this.state.file} />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}